#
# PM2 Mode
#
# See https://docs.docker.com/engine/reference/builder/
#
# See https://hub.docker.com/_/node

##
# Install Deps
##
FROM node:16-alpine AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --production --frozen-lockfile && cp -R ./node_modules ./prod_deps
# only if you need to build
#RUN yarn install --production=false --frozen-lockfile

##
# Rebuild the source code only when needed
##
#FROM node:16-alpine AS builder
#
#WORKDIR /app
#COPY . .
#COPY --from=deps /app/node_modules ./node_modules
#RUN yarn build

##
# Production image, copy all the files and run next
##
FROM node:16-alpine AS runner

# Install pm2
RUN npm install pm2 -g

# pm2 installation
#RUN pm2 install pm2-server-monit

ENV NODE_ENV production
ENV PUBLIC_DIR "/volume-ro/public"
ENV UPLOAD_DIR "/volume-rw/upload"
ENV LOG_DIR "/volume-rw/log/pm2"

# volumes to be bound at runtime
VOLUME [ "/volume-ro", "/volume-rw" ]

# Create and goto app directory
WORKDIR /app

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=deps /app/prod_deps ./node_modules
#COPY --from=builder /app/config ./config
COPY ./config ./config
#COPY --from=builder /app/public ./public
COPY ./public ./public
#COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY ./.next ./.next
#COPY --from=builder /app/next.config.js ./
COPY ./next.config.js ./
#COPY --from=builder /app/package.json ./
COPY ./package.json ./
#COPY --from=builder /app/docker-pm2.config.json ./
COPY ./docker-pm2.config.json ./
#COPY --from=builder /app/server.js ./
COPY ./server.js ./
COPY ./.env ./

USER nextjs
ENV NEXT_TELEMETRY_DISABLED 1

RUN ls -al

ENTRYPOINT pm2-runtime docker-pm2.config.json --env ${NODE_ENV}
